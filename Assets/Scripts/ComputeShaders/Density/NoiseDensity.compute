#pragma kernel Compute
#include "/Includes/Density.compute"
#include "/Includes/Noise.compute"

StructuredBuffer<float3> offsets;
int octaves;
float noiseScale;
float noiseWeight;
float weightMultiplier;
float lacunarity;

float persistence;

float get(float3 pos) {
    float noise = 0.0f;
    float amplitude = 1.0f;
    float weight = 1.0f;
    float frequency = noiseScale / 100.0f;
    
    for (int j = 0; j < octaves; j++) {
        float n = snoise((pos) * frequency + offsets[j]);
        float v = 1.0f - abs(n);
        v = v * v;
        v *= weight;
        weight = max(min(v * weightMultiplier, 1.0f), 0.0f);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    float result = -(pos.y) + noise * noiseWeight;
    
    return -result;
}

[numthreads(numThreads, numThreads, numThreads)]
void Compute (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= sizeX || id.y >= sizeY || id.z >= sizeZ) {
        return;
    }
   
    float density = get(getDensityPosition(id.x, id.y, id.z));
    int index = indexFromCoord(id.x, id.y, id.z);
    points[index] = density;
}
